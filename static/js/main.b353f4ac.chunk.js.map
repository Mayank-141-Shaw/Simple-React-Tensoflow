{"version":3,"sources":["logo.svg","components/TensorFlowExample.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TensorFlowExample","useState","x","y","valuePairsState","setValuePairsState","model","trained","predictedValue","valueToPredict","modelState","setModelState","handleValuePairChange","e","updatedValuePairs","update","train","dataset","index","target","name","$set","parseInt","value","className","map","val","key","data-index","onChange","type","pattern","onClick","xValues","yValues","forEach","push","tf","add","dense","units","inputShape","compile","loss","optimizer","xs","length","ys","fit","epochs","then","placeholder","predict","arraySync","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b353f4ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\nimport update from 'immutability-helper';\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nimport './TensorflowExample.css';\r\n\r\nconst TensorFlowExample = () => {\r\n\r\n    // value pair states\r\n    const [valuePairsState, setValuePairsState] = useState([\r\n        {x: -1, y: -3},\r\n        {x: 0, y: -1},\r\n        {x: 1, y: 1},\r\n        {x: 2, y: 3},\r\n        {x: 3, y: 5},\r\n        {x: 4, y: 7}\r\n    ]);\r\n\r\n    // define the model state\r\n    const [modelState, setModelState] = useState({\r\n        model: null,\r\n        trained: false,\r\n        predictedValue: 'Click on train!',\r\n        valueToPredict: 1,\r\n    });\r\n\r\n    //event handlers\r\n    const handleValuePairChange = (e) => {\r\n        const updatedValuePairs = update(valuePairsState, {\r\n            [e.train.dataset.index]: {\r\n                [e.target.name]: { $set: parseInt(e.target.value) }\r\n            }\r\n        })\r\n\r\n        setValuePairsState(\r\n            updatedValuePairs\r\n        )\r\n    };\r\n\r\n    const handleAddItems = () => {\r\n        setValuePairsState([\r\n            ...valuePairsState,\r\n            { x: 1, y: 1 }\r\n        ]);\r\n    };\r\n\r\n    const handleModelChange = (e) => setModelState({\r\n        ...modelState,\r\n        [e.target.name]: [parseInt(e.target.value)],\r\n    });\r\n\r\n    const handleTrainModel = () => {\r\n        let xValues = [], yValues = [];\r\n\r\n        valuePairsState.forEach((val, index) => {\r\n            xValues.push(val.x);\r\n            yValues.push(val.y);\r\n        });\r\n\r\n        // define a model for linear regression\r\n        const model = tf.sequential();\r\n        model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\r\n\r\n        // Prepare the model for training , Specify the loss and the optimizer\r\n        model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\r\n        const xs = tf.tensor2d(xValues, [xValues.length, 1]);\r\n        const ys = tf.tensor2d(yValues, [yValues.length, 1]);\r\n\r\n        //train the model using the data\r\n        model.fit(xs, ys, { epochs: 250 }).then(() => {\r\n            setModelState({\r\n                ...modelState,\r\n                model: model,\r\n                trained: true,\r\n                predictedValue: 'Ready for making predictions',\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    const handlePredict = () => {\r\n        // use the model to do inference on a data point the model hasn't seen before\r\n        const predictedValue = modelState.model.predict(tf.tensor2d([modelState.valueToPredict], [1,1]))\r\n            .arraySync()[0][0];\r\n\r\n        setModelState({\r\n            ...modelState,\r\n            predictedValue: predictedValue,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"tensorflow-example\">\r\n            <div className=\"train-controls\">\r\n                <h2 className=\"section\">Training Data (x,y) pairs</h2>\r\n                <div className=\"row labels\">\r\n                    <div className=\"field-label column\">X</div>\r\n                    <div className=\"field-label column\">Y</div>\r\n                </div>\r\n\r\n                { valuePairsState.map((val,index) => {\r\n                    return (\r\n                        <div key={index} className=\"row\">\r\n                            <input \r\n                                className=\"field field-x column\"\r\n                                value={val.x}\r\n                                name=\"x\"\r\n                                data-index={index}\r\n                                onChange={handleValuePairChange}\r\n                                type=\"number\" pattern=\"[0-9]*\" />\r\n                            <input\r\n                                className=\"field field-y column\"\r\n                                value={val.y}\r\n                                name=\"y\"\r\n                                data-index={index}\r\n                                onChange={handleValuePairChange}\r\n                                type=\"number\" />\r\n                        </div>\r\n                    );\r\n                })}\r\n\r\n                <button\r\n                    className=\"button-add-example button--green\"\r\n                    onClick={handleAddItems}>\r\n                        +\r\n                    </button>\r\n                <button\r\n                    className=\"button-add-example button--green\"\r\n                    onClick={handleTrainModel}>\r\n                        Train\r\n                    </button>\r\n            </div>\r\n\r\n            <div className=\"predict-controls \">\r\n                <h2 className=\"section\">Predicting</h2>\r\n                <input\r\n                    className=\"field element\"\r\n                    value={modelState.valueToPredict}\r\n                    name=\"valueToPredict\"\r\n                    onChange={handleModelChange}\r\n                    type=\"number\"\r\n                    placeholder=\"Enter an integer number\" /> <br />\r\n                <div className=\"element\">\r\n                    {modelState.predictedValue}\r\n                </div>\r\n                <button\r\n                    className=\"element button--green\"\r\n                    onClick={handlePredict}\r\n                    disabled={!modelState.trained}>\r\n                        Predict\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TensorFlowExample;","import React from 'react';\nimport logo from './logo.svg';\nimport TensorFlowExample from './components/TensorFlowExample';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TensorFlowExample/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}